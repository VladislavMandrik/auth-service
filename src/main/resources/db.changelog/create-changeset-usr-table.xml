<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
		https://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">

    <changeSet id="1" author="author">
        <preConditions onFail="WARN">
            <not>
                <tableExists tableName="usr"/>
            </not>
        </preConditions>
        <createTable tableName="usr">
            <column autoIncrement="true" name="id" type="int">
                <constraints primaryKey="true"/>
            </column>
            <column name="username" type="varchar(100)">
                <constraints nullable="true" unique="true" uniqueConstraintName="TABLE_FIELD_ix1"/>
            </column>

            <column name="password" type="varchar(100)">
                <constraints nullable="false"/>
            </column>

            <column name="role" type="varchar(100)" defaultValue="ROLE_USER">
                <constraints nullable="true"/>
            </column>
        </createTable>
    </changeSet>

    <changeSet id="2" author="author">
        <preConditions onFail="WARN">
            <not>
                <tableExists tableName="roles"/>
            </not>
        </preConditions>
        <createTable tableName="roles">
            <column autoIncrement="true" name="id" type="int">
                <constraints primaryKey="true"/>
            </column>

            <column name="name" type="varchar(100)">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>

    <changeSet  author="author"  id="createFunction">
        <createProcedure>CREATE FUNCTION update_username() RETURNS trigger AS $upd_username$
        BEGIN
        IF
        NEW.username IS NOT NULL THEN
            RAISE EXCEPTION 'username cannot be not null';
        END IF;

        NEW.username := OLD.username;
        RETURN NEW;

        END;
        $upd_username$
        LANGUAGE plpgsql;

        CREATE TRIGGER upd_username
            BEFORE UPDATE
            ON usr
            FOR EACH ROW EXECUTE PROCEDURE update_username();</createProcedure>
    </changeSet>

    <changeSet id="3" author="author">
        <preConditions onFail="WARN">
            <not>
                <tableExists tableName="users_roles"/>
            </not>
        </preConditions>
        <createTable tableName="users_roles">
            <column name="user_id" type="int">
                <constraints primaryKey="true" nullable="false" foreignKeyName="fk_usr_users_roles"
                             references="usr(id)"/>
            </column>

            <column name="role_id" type="int">
                <constraints primaryKey="true" nullable="false" foreignKeyName="fk_roles_users_roles"
                             references="roles(id)"/>
            </column>
        </createTable>
    </changeSet>
</databaseChangeLog>